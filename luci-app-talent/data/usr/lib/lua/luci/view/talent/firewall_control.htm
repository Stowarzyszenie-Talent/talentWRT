<%+header%>

<script>
    if(document.location.protocol != "https:")
        document.location.protocol = "https:";

	const params = new URLSearchParams(window.location.search)
	if (params.get('simple'))
		document.addEventListener("DOMContentLoaded", () => {
			for (e of document.querySelectorAll("header")) e.style.display = "none"
			for (e of document.querySelectorAll("footer")) e.style.display = "none"
		})
</script>

<style>
	.fw-enabled {
		color: green
	}

	.fw-partial {
		color: orange
	}

	.fw-disabled {
		color: red
	}

	.fw-loading {
		color: yellow
	}

	/* FIXME: Something strange is going on with the text sizing on this page */
	/*        This is probably caused by LuCI CSS but I am not willing to spend my time debugging it */

	.buttons {
		margin-top: 10px
	}

	.enable-button {
		padding: 1px;
		padding-left: 5px;
		padding-right: 5px;
		background-color: darkgreen;
	}

	.disable-button {
		padding: 1px;
		padding-left: 5px;
		padding-right: 5px;
		background-color: darkred;
	}

	.font24 {
		font-size: 24pt;
	}

	.font16 {
		font-size: 16pt;
	}

	.error {
		color: red;
	}

	.status {
		margin-bottom: 20px;
	}

	.name {
		padding-bottom: 16px;
		border-bottom: 1px solid gray;
		margin-bottom: 10px;
	}

	#router-list> :not(:first-child) {
		margin-top: 20px;
	}
</style>

<template id="router-base">
	<div>
		<div class="font24 name">
		</div>

		<div class="font24 status">
			Stan zapory: <span class="status-value fw-loading">Ładowanie...</span>
		</div>

		<div class="buttons">
			<button disabled="true" class="font24 disable-button">Wyłącz</button>
			<button disabled="true" class="font24 enable-button">Włącz</button>
		</div>

		<div class="error font16"></div>
	</div>
</template>

<script>
	let request
	let token

	async function getFirewallState(address) {
		let response = (await request.get(`https://${address}/cgi-bin/luci/talent/firewall`, {
			query: {tt: token}
		})).json()
		return response.data.state
	}

	async function setFirewallState(address, state) {
		(await request.post(`https://${address}/cgi-bin/luci/talent/firewall`, null, {
			query: {tt: token, state: state}
		})).json()
	}

	async function setupRouter(el, {name, address}) {
		let statusElement = el.getElementsByClassName("status-value")[0]
		let errorElement = el.getElementsByClassName("error")[0]
		let disableButton = el.getElementsByClassName("dissable-button")[0]
		let enableButton = el.getElementsByClassName("enable-button")[0]

		async function updateState() {
			let state = await getFirewallState(address)
			switch (state) {
				case "enabled":
					statusElement.textContent = "Włączona";
					statusElement.classList = "status-value fw-enabled"
					break;
				case "partial":
					statusElement.textContent = "Częściowo włączona";
					statusElement.classList = "status-value fw-partial"
					break;
				case "disabled":
					statusElement.textContent = "Wyłączona";
					statusElement.classList = "status-value fw-disabled"
					break;
			}
			return state
		}

		await updateState(address)

		window.setInterval(updateState, 5000)

		function setButtonsDisabled(disabled) {
			for (button of el.querySelectorAll("button"))
				button.disabled = disabled
		}

		async function setState(state) {
			setButtonsDisabled(true)

			if (await updateState() == state) {
				setButtonsDisabled(false)
				return
			}

			window.setTimeout(() => setButtonsDisabled(false), 3000)

			try {
				await setFirewallState(address, state)
				errorElement.textContent = ""
			} catch (ex) {
				errorElement.textContent = "Coś poszło nie tak, proszę odświeżyć stronę i spróbować ponownie za krótką chwilę. Jeśli problem nadal następuje po kilku próbach coś może być zepsute!"
				console.error(ex)
			}

			await updateState()
		}

		setButtonsDisabled(false)
		el.getElementsByClassName("disable-button")[0].onclick = () => setState("disabled")
		el.getElementsByClassName("enable-button")[0].onclick = () => setState("enabled")
	}

	function addRouter({name, address}) {
		let el = document.getElementById("router-base").content.firstElementChild.cloneNode(true)

		let nameElement = el.getElementsByClassName("name")[0]
		nameElement.textContent = router.name

		document.getElementById("router-list").appendChild(el)
		return setupRouter(el, router)
	}

	(async () => {
		request = await L.require('request')
		let response = (await request.get("/cgi-bin/luci/talent/routers", {
			credentials: true
		})).json()

		token = response.token

		for (router of response.routers) addRouter(router)
	})()
</script>

<div id="router-list">
<br>
</div>

<%+footer%>
